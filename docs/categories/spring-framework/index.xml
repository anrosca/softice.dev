<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Spring Framework - Category - Andrei Roșca</title>
        <link>https://softice.dev/categories/spring-framework/</link>
        <description>Spring Framework - Category - Andrei Roșca</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 04 Jun 2022 16:41:00 &#43;0300</lastBuildDate><atom:link href="https://softice.dev/categories/spring-framework/" rel="self" type="application/rss+xml" /><item>
    <title>Introduction to Spring Framework 6 HTTP interfaces</title>
    <link>https://softice.dev/posts/introduction_to_spring_framework_6_http_interfaces/</link>
    <pubDate>Sat, 04 Jun 2022 16:41:00 &#43;0300</pubDate><guid>https://softice.dev/posts/introduction_to_spring_framework_6_http_interfaces/</guid>
    <description><![CDATA[Introduction The Spring Framework version 6, along with (Spring Boot version 3) will introduce the ability to consume HTTP apis in a declarative way using interfaces. This feature resembles the Spring Data way of writing repositories, where we just create an interface and declare what methods it should have and Spring Data will create a proxy, implementing all SQL queries.
It&rsquo;s worth pointing out that Spring Framework 6 is still in the snapshot state and the current article reflects the state of the things as they are in June 2022.]]></description>
</item>
<item>
    <title>Optimistic and pessimistic concurrency control with Spring-Data-JPA</title>
    <link>https://softice.dev/posts/optimistic_and_pessimistic_locking_with_spring_data_jpa/</link>
    <pubDate>Thu, 19 May 2022 11:48:00 &#43;0300</pubDate><guid>https://softice.dev/posts/optimistic_and_pessimistic_locking_with_spring_data_jpa/</guid>
    <description><![CDATA[Introduction Today we are going to learn about the difference between optimistic and pessimistic concurrency control using Spring-Data-Jpa.
Concurrency control is about managing concurrent access to our data. Let&rsquo;s say for example that we have a hotel booking system and there&rsquo;s only one room available in the hotel and 2 users at the same time try to book it. Who will get the room? Well, it&rsquo;s possible that both of them will succeed, but that will leave the hotel staff with an awkward situation.]]></description>
</item>
<item>
    <title>Spring puzzler: the @TransactionalEventListener</title>
    <link>https://softice.dev/posts/spring_puzzler_transactional_event_listener/</link>
    <pubDate>Mon, 16 May 2022 23:01:00 &#43;0300</pubDate><guid>https://softice.dev/posts/spring_puzzler_transactional_event_listener/</guid>
    <description><![CDATA[Introduction Today we&rsquo;re going to take a look at a new Spring @Transactional puzzler involving the @TransactionalEventListener. It&rsquo;s an old quirk of Spring related to transaction-bound events (both declarative and programmatic ones) and though not commonly experienced, encountering it can leave you confused for hours. Let&rsquo;s have a look.
The puzzler Suppose we have the following code:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  @Slf4j @SpringBootApplication public class SpringDeclarativeTxManagementApplication { public static void main(String[] args) { SpringApplication.]]></description>
</item>
<item>
    <title>Spring puzzler: transactional @PostConstruct methods</title>
    <link>https://softice.dev/posts/spring_puzzler_transactional_poostconstruct_methods/</link>
    <pubDate>Sun, 15 May 2022 16:40:47 &#43;0300</pubDate><guid>https://softice.dev/posts/spring_puzzler_transactional_poostconstruct_methods/</guid>
    <description><![CDATA[Introduction Today we&rsquo;ll be looking at a Spring puzzler - transactional @PostContruct methods. Though it&rsquo;s not a commonly used thing, it can be useful to know some limitations of the Spring&rsquo;s declarative transaction management approach.
@PostConstruct methods The @PostConstruct are called automatically by Spring after all of the bean&rsquo;s dependencies were injected. Let&rsquo;s look at an example:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  @Slf4j @SpringBootApplication public class SpringDeclarativeTxManagementApplication { public static void main(String[] args) { SpringApplication.]]></description>
</item>
<item>
    <title>Introduction to declarative transaction management in Spring Framework</title>
    <link>https://softice.dev/posts/introduction_to_declarative_tx_management/</link>
    <pubDate>Tue, 10 May 2022 08:54:47 &#43;0300</pubDate><guid>https://softice.dev/posts/introduction_to_declarative_tx_management/</guid>
    <description><![CDATA[Introduction In this blog post we are going to explore the internals of Spring&rsquo;s declarative transaction management. We&rsquo;ll start with the basics, and then we&rsquo;ll dive deeper, looking at the internals and some potential pitfalls which we can run into.
We&rsquo;ll be using:
 Spring Boot 2.6.7 Java 17 Postgresql Spring Data JPA  But first, let&rsquo;s discuss a bit why do we even bother with transactions in the first place?]]></description>
</item>
</channel>
</rss>
